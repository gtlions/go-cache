// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheClient interface {
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	StoreStream(ctx context.Context, opts ...grpc.CallOption) (Cache_StoreStreamClient, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResonse, error)
}

type cacheClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheClient(cc grpc.ClientConnInterface) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/cache.Cache/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/cache.Cache/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) StoreStream(ctx context.Context, opts ...grpc.CallOption) (Cache_StoreStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[0], "/cache.Cache/StoreStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheStoreStreamClient{stream}
	return x, nil
}

type Cache_StoreStreamClient interface {
	Send(*StoreRequest) error
	Recv() (*StoreResponse, error)
	grpc.ClientStream
}

type cacheStoreStreamClient struct {
	grpc.ClientStream
}

func (x *cacheStoreStreamClient) Send(m *StoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheStoreStreamClient) Recv() (*StoreResponse, error) {
	m := new(StoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResonse, error) {
	out := new(ListResonse)
	err := c.cc.Invoke(ctx, "/cache.Cache/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServer is the server API for Cache service.
// All implementations must embed UnimplementedCacheServer
// for forward compatibility
type CacheServer interface {
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	StoreStream(Cache_StoreStreamServer) error
	List(context.Context, *emptypb.Empty) (*ListResonse, error)
	mustEmbedUnimplementedCacheServer()
}

// UnimplementedCacheServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServer struct {
}

func (UnimplementedCacheServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedCacheServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCacheServer) StoreStream(Cache_StoreStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreStream not implemented")
}
func (UnimplementedCacheServer) List(context.Context, *emptypb.Empty) (*ListResonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCacheServer) mustEmbedUnimplementedCacheServer() {}

// UnsafeCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServer will
// result in compilation errors.
type UnsafeCacheServer interface {
	mustEmbedUnimplementedCacheServer()
}

func RegisterCacheServer(s grpc.ServiceRegistrar, srv CacheServer) {
	s.RegisterService(&Cache_ServiceDesc, srv)
}

func _Cache_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_StoreStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServer).StoreStream(&cacheStoreStreamServer{stream})
}

type Cache_StoreStreamServer interface {
	Send(*StoreResponse) error
	Recv() (*StoreRequest, error)
	grpc.ServerStream
}

type cacheStoreStreamServer struct {
	grpc.ServerStream
}

func (x *cacheStoreStreamServer) Send(m *StoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheStoreStreamServer) Recv() (*StoreRequest, error) {
	m := new(StoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cache_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Cache_ServiceDesc is the grpc.ServiceDesc for Cache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cache.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _Cache_Store_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Cache_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Cache_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreStream",
			Handler:       _Cache_StoreStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cache.proto",
}
